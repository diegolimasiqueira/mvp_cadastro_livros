// <auto-generated />
using BookStore.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BookStore.Infrastructure.Migrations
{
    [DbContext(typeof(BookStoreDbContext))]
    [Migration("20251029032510_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BookStore.Domain.Entities.Assunto", b =>
                {
                    b.Property<int>("CodAs")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("CodAs");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CodAs"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("Descricao");

                    b.HasKey("CodAs");

                    b.HasIndex("Descricao")
                        .HasDatabaseName("IX_Assunto_Descricao");

                    b.ToTable("Assunto", (string)null);
                });

            modelBuilder.Entity("BookStore.Domain.Entities.Autor", b =>
                {
                    b.Property<int>("CodAu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("CodAu");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CodAu"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("Nome");

                    b.HasKey("CodAu");

                    b.HasIndex("Nome")
                        .HasDatabaseName("IX_Autor_Nome");

                    b.ToTable("Autor", (string)null);
                });

            modelBuilder.Entity("BookStore.Domain.Entities.FormaCompra", b =>
                {
                    b.Property<int>("CodFc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("CodFc");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CodFc"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("Descricao");

                    b.HasKey("CodFc");

                    b.HasIndex("Descricao")
                        .IsUnique()
                        .HasDatabaseName("IX_FormaCompra_Descricao");

                    b.ToTable("FormaCompra", (string)null);
                });

            modelBuilder.Entity("BookStore.Domain.Entities.Livro", b =>
                {
                    b.Property<int>("CodI")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("CodI");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CodI"));

                    b.Property<string>("AnoPublicacao")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("AnoPublicacao");

                    b.Property<int>("Edicao")
                        .HasColumnType("integer")
                        .HasColumnName("Edicao");

                    b.Property<string>("Editora")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("Editora");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("Titulo");

                    b.HasKey("CodI");

                    b.HasIndex("Titulo")
                        .HasDatabaseName("IX_Livro_Titulo");

                    b.ToTable("Livro", (string)null);
                });

            modelBuilder.Entity("BookStore.Domain.Entities.LivroAssunto", b =>
                {
                    b.Property<int>("Livro_CodI")
                        .HasColumnType("integer")
                        .HasColumnName("Livro_CodI");

                    b.Property<int>("Assunto_CodAs")
                        .HasColumnType("integer")
                        .HasColumnName("Assunto_CodAs");

                    b.HasKey("Livro_CodI", "Assunto_CodAs");

                    b.HasIndex("Assunto_CodAs")
                        .HasDatabaseName("Livro_Assunto_FKIndex2");

                    b.HasIndex("Livro_CodI")
                        .HasDatabaseName("Livro_Assunto_FKIndex1");

                    b.ToTable("Livro_Assunto", (string)null);
                });

            modelBuilder.Entity("BookStore.Domain.Entities.LivroAutor", b =>
                {
                    b.Property<int>("Livro_CodI")
                        .HasColumnType("integer")
                        .HasColumnName("Livro_CodI");

                    b.Property<int>("Autor_CodAu")
                        .HasColumnType("integer")
                        .HasColumnName("Autor_CodAu");

                    b.HasKey("Livro_CodI", "Autor_CodAu");

                    b.HasIndex("Autor_CodAu")
                        .HasDatabaseName("Livro_Autor_FKIndex2");

                    b.HasIndex("Livro_CodI")
                        .HasDatabaseName("Livro_Autor_FKIndex1");

                    b.ToTable("Livro_Autor", (string)null);
                });

            modelBuilder.Entity("BookStore.Domain.Entities.LivroPreco", b =>
                {
                    b.Property<int>("CodLp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("CodLp");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CodLp"));

                    b.Property<int>("FormaCompra_CodFc")
                        .HasColumnType("integer")
                        .HasColumnName("FormaCompra_CodFc");

                    b.Property<int>("Livro_CodI")
                        .HasColumnType("integer")
                        .HasColumnName("Livro_CodI");

                    b.Property<decimal>("Valor")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("Valor");

                    b.HasKey("CodLp");

                    b.HasIndex("FormaCompra_CodFc")
                        .HasDatabaseName("IX_LivroPreco_FormaCompra");

                    b.HasIndex("Livro_CodI")
                        .HasDatabaseName("IX_LivroPreco_Livro");

                    b.HasIndex("Livro_CodI", "FormaCompra_CodFc")
                        .IsUnique()
                        .HasDatabaseName("IX_LivroPreco_Livro_FormaCompra");

                    b.ToTable("LivroPreco", (string)null);
                });

            modelBuilder.Entity("BookStore.Domain.Entities.Views.VwLivrosPorAutor", b =>
                {
                    b.Property<string>("AnoPublicacao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Assuntos")
                        .HasColumnType("text");

                    b.Property<int>("AutorCodigo")
                        .HasColumnType("integer");

                    b.Property<string>("AutorNome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Edicao")
                        .HasColumnType("integer");

                    b.Property<string>("Editora")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FormasCompra")
                        .HasColumnType("text");

                    b.Property<int>("LivroCodigo")
                        .HasColumnType("integer");

                    b.Property<string>("LivroTitulo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable((string)null);

                    b.ToView("vw_livros_por_autor", (string)null);
                });

            modelBuilder.Entity("BookStore.Domain.Entities.LivroAssunto", b =>
                {
                    b.HasOne("BookStore.Domain.Entities.Assunto", "Assunto")
                        .WithMany("LivroAssuntos")
                        .HasForeignKey("Assunto_CodAs")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Livro_Assunto_Assunto");

                    b.HasOne("BookStore.Domain.Entities.Livro", "Livro")
                        .WithMany("LivroAssuntos")
                        .HasForeignKey("Livro_CodI")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Livro_Assunto_Livro");

                    b.Navigation("Assunto");

                    b.Navigation("Livro");
                });

            modelBuilder.Entity("BookStore.Domain.Entities.LivroAutor", b =>
                {
                    b.HasOne("BookStore.Domain.Entities.Autor", "Autor")
                        .WithMany("LivroAutores")
                        .HasForeignKey("Autor_CodAu")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Livro_Autor_Autor");

                    b.HasOne("BookStore.Domain.Entities.Livro", "Livro")
                        .WithMany("LivroAutores")
                        .HasForeignKey("Livro_CodI")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Livro_Autor_Livro");

                    b.Navigation("Autor");

                    b.Navigation("Livro");
                });

            modelBuilder.Entity("BookStore.Domain.Entities.LivroPreco", b =>
                {
                    b.HasOne("BookStore.Domain.Entities.FormaCompra", "FormaCompra")
                        .WithMany("LivroPrecos")
                        .HasForeignKey("FormaCompra_CodFc")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_LivroPreco_FormaCompra");

                    b.HasOne("BookStore.Domain.Entities.Livro", "Livro")
                        .WithMany("LivroPrecos")
                        .HasForeignKey("Livro_CodI")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_LivroPreco_Livro");

                    b.Navigation("FormaCompra");

                    b.Navigation("Livro");
                });

            modelBuilder.Entity("BookStore.Domain.Entities.Assunto", b =>
                {
                    b.Navigation("LivroAssuntos");
                });

            modelBuilder.Entity("BookStore.Domain.Entities.Autor", b =>
                {
                    b.Navigation("LivroAutores");
                });

            modelBuilder.Entity("BookStore.Domain.Entities.FormaCompra", b =>
                {
                    b.Navigation("LivroPrecos");
                });

            modelBuilder.Entity("BookStore.Domain.Entities.Livro", b =>
                {
                    b.Navigation("LivroAssuntos");

                    b.Navigation("LivroAutores");

                    b.Navigation("LivroPrecos");
                });
#pragma warning restore 612, 618
        }
    }
}
